// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Automation.DemoUI.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Google Cloud Pricing Calculator")]
    public partial class GoogleCloudPricingCalculatorFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Login.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Google Cloud Pricing Calculator", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate monthly rent for Compute Engine")]
        public void CalculateMonthlyRentForComputeEngine()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate monthly rent for Compute Engine", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 testRunner.Given("I navigate to \"https://cloud.google.com/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
 testRunner.When("I click the search button at the top of the portal page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 6
 testRunner.And("I enter \"Google Cloud Platform Pricing Calculator\" into the search field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
 testRunner.And("I click \"Google Cloud Platform Pricing Calculator\" in the search results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
 testRunner.And("I click COMPUTE ENGINE at the top of the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1.AddRow(new string[] {
                            "Number of instances",
                            "4"});
                table1.AddRow(new string[] {
                            "Operating System / Software",
                            "Free: Debian, CentOS, CoreOS, Ubuntu or BYOL (Bring Your Own License)"});
                table1.AddRow(new string[] {
                            "VM Class",
                            "Regular"});
                table1.AddRow(new string[] {
                            "Instance type",
                            "n1-standard-8vCPUs: 8, RAM: 30GiB"});
                table1.AddRow(new string[] {
                            "Number of GPUs",
                            "1"});
                table1.AddRow(new string[] {
                            "GPU type",
                            "NVIDIA TESLA P100"});
                table1.AddRow(new string[] {
                            "Local SSD",
                            "2x375 GB"});
                table1.AddRow(new string[] {
                            "Datacenter location",
                            "Belgium (europe-west1)"});
                table1.AddRow(new string[] {
                            "Committed usage",
                            "1 year"});
#line 9
 testRunner.And("I fill out the form with the following data:", ((string)(null)), table1, "And ");
#line hidden
#line 20
 testRunner.And("I click more options", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Expected Value"});
                table2.AddRow(new string[] {
                            "VM Class",
                            "Regular"});
                table2.AddRow(new string[] {
                            "Instance type",
                            "n1-standard-8, vCPUs: 8, RAM: 30 GB"});
                table2.AddRow(new string[] {
                            "Region",
                            "Belgium (europe-west1)"});
                table2.AddRow(new string[] {
                            "Local SSD",
                            "2x375 GB"});
                table2.AddRow(new string[] {
                            "Commitment term",
                            "1 year"});
#line 21
 testRunner.Then("the estimated data should be correct:", ((string)(null)), table2, "Then ");
#line hidden
#line 28
 testRunner.And("the monthly rent should match the manual calculation result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
